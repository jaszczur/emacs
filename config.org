#+Title: Emacs Kickstarter
#+Author: MiniApollo + Jaszczur
#+Description: A starting point for Gnu Emacs with good defaults and packages that most people may want to use.
#+Startup: show4levels
#+Options: toc:3

* Table Of Contents :toc:
- [[#important-to-load-first][Important to load first]]
  - [[#startup-performance][Startup Performance]]
  - [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
  - [[#elpaca-package-manager][Elpaca package manager]]
  - [[#use-package][Use Package]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#diminish][Diminish]]
  - [[#elpaca-wait][ELPACA WAIT]]
  - [[#good-defaults][Good Defaults]]
- [[#appearance][Appearance]]
  - [[#set-theme][Set Theme]]
  - [[#transparency][Transparency]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
  - [[#project-tree][Project tree]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
  - [[#eglot][Eglot]]
  - [[#yasnippet][Yasnippet]]
  - [[#formatting][Formatting]]
  - [[#syntax-check][Syntax check]]
  - [[#language-modes][Language modes]]
  - [[#terminal][Terminal]]
  - [[#tree-sitter][Tree sitter]]
- [[#multi-file-example][Multi File Example]]
  - [[#adding-the-lisp-directory-to-load-path][Adding the lisp directory to load-path]]
  - [[#sourcing-the-files][Sourcing the files]]
  - [[#using-the-file][Using the file]]
- [[#other-packages][Other Packages]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#git][Git]]
  - [[#completion-popup---corfu][Completion popup - Corfu]]
  - [[#cape][Cape]]
  - [[#evil-extensions][Evil extensions]]
  - [[#orderless][Orderless]]
  - [[#vertico-and-marginalia][Vertico and Marginalia]]
  - [[#consult][Consult]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#which-key][Which-Key]]
  - [[#disable-line-numbers-in-some-modes][Disable line numbers in some modes]]
  - [[#calendar][Calendar]]
  - [[#obsidian][Obsidian]]
- [[#ai-assistance][AI assistance]]
  - [[#copilot][Copilot]]
  - [[#gptel][GPtel]]
- [[#runtime-performance][Runtime Performance]]

* Important to load first
** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes. Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times.
If you want to use this don't forget to add this to the top of the org document (#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code), the init.el file won't update on change!
To fix this, you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.

This snippet adds a hook to org-mode buffers so that start/org-babel-tangle-config gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so,
automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
    (defun start/org-babel-tangle-config ()
      "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'start/org-babel-tangle-config)))
#+end_src
** Elpaca package manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.8)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; (setq elpaca-ignored-dependencies 
;;       (cl-set-difference elpaca-ignored-dependencies (list 'seq 'transient)))
#+end_src

** Use Package
  Overriding the default use-package to use Elpaca.

#+begin_src emacs-lisp
      ;; Install use-package support
      (elpaca elpaca-use-package
        ;; Enable use-package :ensure support for Elpaca.
        (elpaca-use-package-mode)
        (setq use-package-always-ensure t))

    (elpaca-wait)
#+end_src

** Evil Mode
An extensible vi/vim layer for Emacs. Because…let’s face it. The Vim keybindings are just plain better.
Notes:
- You can toggle evil mode with C-z.
- To paste without copy (yank) select the text and use P (shift-p).

If you don't want to use evil-mode don't forget to remove:
- Messages buffer fix in Good default section (:ghook)
- And also change general.el keybindings and setup (general-evil-setup, :states, etc.)
#+begin_src emacs-lisp
    (use-package evil
      :init ;; Execute code Before a package is loaded
      (evil-mode)
      :config ;; Execute code After a package is loaded
      (evil-set-initial-state 'eat-mode 'insert) ;; Set initial state in eat terminal to insert mode
      :custom ;; Customization of package custom variables
      (evil-want-keybinding nil)    ;; Disable evil bindings in other modes (It's not consistent and not good)
      (evil-want-C-u-scroll t)      ;; Set C-u to scroll up
      (evil-want-C-i-jump nil)      ;; Disables C-i jump
      (evil-undo-system 'undo-redo) ;; C-r to redo
      (org-return-follows-link t)   ;; Sets RETURN key in org-mode to follow links
      ;; Unmap keys in 'evil-maps. If not done, org-return-follows-link will not work
      :bind (:map evil-motion-state-map
                  ("SPC" . nil)
                  ("RET" . nil)
                  ("TAB" . nil)
                  ("," . nil)))
    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dired ibuffer magit corfu vertico consult))
      (setq evil-collection-key-blacklist (append (list "SPC" ",") evil-collection-key-blacklist))
      (evil-collection-init))
#+end_src

** General Keybindings
A keybinding framework to set keybindings easily.
The Leader key is what you will press when you want to access your keybindings (SPC + . Find file).
To search and replace, use query-replace-regexp to replace one by one C-M-% (SPC to replace n to skip).

#+begin_src emacs-lisp
    (use-package general
      :after evil
      :config
      (general-evil-setup)
      ;; Set up 'SPC' as the leader key
      (general-create-definer j/leader-keys
        :states '(normal insert visual motion emacs)
        :keymaps 'override
        :prefix "SPC"           ;; Set leader key
        :global-prefix "C-SPC") ;; Set global leader key

      (general-create-definer j/local-leader-keys
        :states '(normal insert visual motion emacs)
        :keymaps 'override
        :prefix ",")

          (j/leader-keys
            "." '(find-file :wk "Find file")
            "!" '(eat :wk "Terminal")
            "SPC" '(execute-extended-command :wk "Execute command")
            ":" '(eval-expression :wk "Evaluate expression")
            "TAB" '(previous-buffer :wk "Previous buffer")
            "p" '(projectile-command-map :wk "Projectile command map"))

          (j/leader-keys
            "b" '(:ignore t :wk "Buffer Bookmarks")
            "b b" '(consult-buffer :wk "Switch buffer")
            "b d" '(kill-this-buffer :wk "Delete this buffer")
            "b i" '(ibuffer :wk "Ibuffer")
            "b n" '(next-buffer :wk "Next buffer")
            "b p" '(previous-buffer :wk "Previous buffer")
            "b r" '(revert-buffer :wk "Reload buffer")
            "b j" '(consult-bookmark :wk "Bookmark jump"))

          (j/leader-keys
            "c" '(:ignore t :wk "Code")
            "c e" '(eglot-reconnect :wk "Eglot Reconnect")
            "c f" '(eglot-format :wk "Eglot Format")
            "c l" '(consult-flymake :wk "Consult Flymake"))

          (j/leader-keys
            "d" '(:ignore t :wk "Dired")
            "d v" '(dired :wk "Open dired")
            "d j" '(dired-jump :wk "Dired jump to current"))

          (j/leader-keys
            "e" '(:ignore t :wk "Evaluate")
            "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
            "e b" '(eval-defun :wk "Evaluate elisp defun")
            "e e" '(eval-last-sexp :wk "Evaluate elisp last sexp")
            "e r" '(eval-region :wk "Evaluate elisp in region"))

          (j/leader-keys
            "f" '(:ignore t :wk "Find / File")
            "f s" '(save-buffer :wk "Save file")
            "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
            "f r" '(consult-recent-file :wk "Recent files")
            "f f" '(find-file :wk "Find file")
            "f d" '(consult-fd :wk "Fd search for files")
            "f g" '(consult-ripgrep :wk "Ripgrep search in files")
            "f l" '(consult-line :wk "Find line")
            "f i" '(consult-imenu :wk "Imenu buffer locations"))

          (j/leader-keys
            "g" '(:ignore t :wk "Git")
            "g g" '(magit-status :wk "Magit status"))

          (j/leader-keys
            "h" '(:ignore t :wk "Help") ;; To get more help use C-h commands (describe variable, function, etc.)
            "h f" '(describe-function :wk "Describe function")
            "h h" '(eldoc-doc-buffer :wk "Focus on documentation buffer")
            "h v" '(describe-variable :wk "Describe variable")
            "h r" '((lambda () (interactive)
                      (load-file user-init-file))
                    :wk "Reload Emacs config"))

          (j/leader-keys
            "o" '(:ignore t :wk "Open")
            "o c" '(calendar :wk "Calendar"))

          (j/leader-keys
            "r" '(:ignore t :wk "Region")
            "r n" '(narrow-to-region :wk "Narrow to region")
            "r w" '(widen :wk "Widen"))

          (j/leader-keys
            "t" '(:ignore t :wk "Toggle")
            "t t" '(visual-line-mode :wk "Toggle truncated lines (wrap)")
            "t l" '(display-line-numbers-mode :wk "Toggle line numbers"))

          (j/leader-keys 
             "w" '(:ignore t :wk "Quit")
             "w d" '(delete-window :wk "Close window")
             "w n" '(evil-window-down :wk "Select window below")
             "w e" '(evil-window-up :wk "Select window above")
             "w h" '(evil-window-left :wk "Select left window")
             "w i" '(evil-window-right :wk "Select right window"))

          (j/leader-keys 
             "q" '(:ignore t :wk "Window")
             "q q" '((lambda () (interactive) (save-some-buffers t) (kill-emacs)) :wk "Save all and quit")
             "q Q" '(save-buffers-kill-emacs :wk "Save and quit Emacs and Daemon"))
    )
#+end_src

** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** ELPACA WAIT
#+begin_src emacs-lisp
(elpaca-wait)
#+end_src
** Good Defaults
#+begin_src emacs-lisp
    (use-package emacs
      :ensure nil
      :custom
      (menu-bar-mode nil)         ;; Disable the menu bar
      (scroll-bar-mode nil)       ;; Disable the scroll bar
      (tool-bar-mode nil)         ;; Disable the tool bar
      (inhibit-startup-screen t)  ;; Disable welcome screen

      (delete-selection-mode t)   ;; Select text and delete it by typing.
      (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
      (electric-pair-mode t)      ;; Turns on automatic parens pairing

      (blink-cursor-mode nil)     ;; Don't blink cursor
      (global-auto-revert-mode t) ;; Automatically reload file and show changes if the file has changed

      ;;(dired-kill-when-opening-new-dired-buffer t) ;; Dired don't create new buffer
      (recentf-mode t) ;; Enable recent file mode

      ;;(global-visual-line-mode t)           ;; Enable truncated lines
      (display-line-numbers-type 'relative) ;; Relative line numbers
      (global-display-line-numbers-mode t)  ;; Display line numbers

      (mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling
      (scroll-conservatively 10) ;; Smooth scrolling
      (scroll-margin 8)

      (tab-width 4)

      (make-backup-files nil) ;; Stop creating ~ backup files
      (auto-save-default nil) ;; Stop creating # auto save files
      :hook
      (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally
      :config
      ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
      (setq custom-file (locate-user-emacs-file "custom-vars.el"))
      (load custom-file 'noerror 'nomessage)
      :bind (
             ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
             )
      ;; Fix general.el leader key not working instantly in messages buffer with evil mode
      :ghook ('after-init-hook
          (lambda (&rest _)
            (when-let ((messages-buffer (get-buffer "*Messages*")))
              (with-current-buffer messages-buffer
                (evil-normalize-keymaps))))
          nil nil t)
      )
#+end_src

* Appearance
** Set Theme
Set catppuccin theme, if you want some themes try out doom-themes.
Use consult-theme to easily try out themes (*Epilepsy* Warning).
#+begin_src emacs-lisp
        (use-package catppuccin-theme
          :config
          (setq catppuccin-flavor 'macchiato) ;; or 'latte, 'macchiato, or 'mocha
          (load-theme 'catppuccin :no-confirm) ;; We need to add :no-confirm to trust this package

          (defun j/toggle-dark-mode ()
            (interactive)
            (setq catppuccin-flavor (if (eq catppuccin-flavor 'latte) 'macchiato 'latte))
            (catppuccin-reload))

                  (j/leader-keys
                    "t d" '(j/toggle-dark-mode :wk "Toggle dark mode"))

    )
#+end_src

** Transparency
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(alpha-background . 90)) ;; For all new frames henceforth
#+end_src

** Fonts
*** Setting fonts
#+begin_src emacs-lisp

    (set-face-attribute 'default nil
      :font "Iosevka Nerd Font"
      :height 160
      :weight 'medium)
    (set-face-attribute 'variable-pitch nil
      :font "Overpass"
      :height 160
      :weight 'medium)
    (set-face-attribute 'fixed-pitch nil
      :font "Iosevka Nerd Font"
      :height 160
      :weight 'medium)
        ;; This sets the default font on all graphical frames created after restarting Emacs.
        ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
        ;; are not right unless I also add this method of setting the default font.

        ;;(add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font")) ;; Set your favorite font
        (setq-default line-spacing 0.12)
#+end_src

*** Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (use-package emacs
      :ensure nil
      :bind
      ("C-+" . text-scale-increase)
      ("C--" . text-scale-decrease)
      ("<C-wheel-up>" . text-scale-increase)
      ("<C-wheel-down>" . text-scale-decrease))
#+end_src

** Modeline
Replace the default modeline with a prettier more useful.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :custom
      (doom-modeline-height 25)     ;; Sets modeline height
      (doom-modeline-bar-width 5)   ;; Sets right bar width
      (doom-modeline-persp-name t)  ;; Adds perspective name to modeline
      (doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name
#+end_src

** Project tree
#+begin_src emacs-lisp
    (use-package treemacs
      :general
      (j/leader-keys :states 'normal
        "o p" '(treemacs :wk "Toggle project tree")))
    (use-package treemacs-projectile 
      :after treemacs)
    (use-package treemacs-evil
      :after treemacs evil)
    (use-package treemacs-nerd-icons
      :after treemacs
      :config (treemacs-load-theme "nerd-icons"))
#+end_src
* Development
** Projectile
Project interaction library for Emacs.
#+begin_src emacs-lisp
    (use-package projectile
      :init
      (projectile-mode)
      :custom
      (projectile-run-use-comint-mode t) ;; Interactive run dialog when running projects inside emacs (like giving input)
      (projectile-switch-project-action #'projectile-dired) ;; Open dired when switching to a project
      (projectile-project-search-path '("~/projects/" ("~/.config" . 1)))) ;; . 1 means only search the first subdirectory level for projects
    ;; Use Bookmarks for smaller, not standard projects
#+end_src

** Eglot
Language Server Protocol Support for Emacs. The built-in is now Eglot (with emacs 29).

Eglot is fast and minimal, but requires manual setup for LSP servers (downloading).
For more [[https://www.gnu.org/software/emacs/manual/html_mono/eglot.html][information how to use.]] One alternative to Eglot is Lsp-mode, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] page for more information.

Eglot is easy to set up, but the only difficult part is downloading and setting up the lsp servers.
After that just add a hook with eglot-ensure to automatically start eglot for a given file type. And you are done.

As an example to use C, C++ you need to install clangd(or ccls) and uncomment the following lines. Now the language server will start automatically when opening any c,c++ file.

A harder example is Lua. Download the lua-language-server from their git repository, make the lua-language-server file executable at lua-language-server/bin.
Uncomment the following lines and change the path to the language server executable. Now the language server will work.
Or add the lua-language-server executable to your path.

If you can use a package manager just install the lsp server and add a hook.
Use visual block to uncomment easily in Org documents (C-v).
#+begin_src emacs-lisp
    (use-package eglot
      :ensure nil ;; Don't install eglot because it's now built-in
      ;; Autostart lsp servers for a given mode
      ;; MOVED to configuration of *-mode packages
      ;; :hook ((c-mode
      ;;         c++-mode
      ;;         lua-mode
      ;;         nushell-mode
      ;;         nix-mode
      ;;         rust-mode
      ;;         typescript-mode
      ;;         web-mode)
      ;;        . eglot-ensure)
      :custom
      ;; Good default
      (eglot-events-buffer-size 0) ;; No event buffers (Lsp server logs)
      (eglot-autoshutdown t)	   ;; Shutdown unused servers.
      (eglot-report-progress nil) ;; Disable lsp server logs (Don't show lsp messages at the bottom, java)
      ;; Manual lsp servers
      :config
      (defun j/eglot-add-modes-for-server (modes server-cmd)
        (setq eglot-server-programs 
              (seq-map (lambda (entry)
                         (if (and (listp (cdr entry)) ;; Ensure the value is a list
                                  (string-equal (car (cdr entry)) ;; Match the first element of the value
                                                server-cmd))
                             (cons (append (car entry) modes) (cdr entry)) ;; Add `web-mode` to the key
                           entry)) ;; else return entry
                       eglot-server-programs)))
      ;;; Apparently these are already configured in Emacs 29.4. Let's leave these as documentation for future use.
      ;; (add-to-list 'eglot-server-programs '(nushell-mode . ("nu" "--lsp")))
      ;; (add-to-list 'eglot-server-programs '(nix-mode . ("nixd")))
      (j/eglot-add-modes-for-server '(web-mode) "typescript-language-server"))
#+end_src

** Yasnippet
A template system for Emacs. And yasnippet-snippets is a snippet collection package.
To use it write out the full keyword (or use autocompletion) and press Tab.
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))
#+end_src

** Formatting
#+begin_src emacs-lisp
    (use-package apheleia
     :config 
     (apheleia-global-mode +1))
#+end_src
** Syntax check
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src
** Language modes
It's not required for every language like C,C++,C#,Java,Javascript etc. to install language mode packages,
but for more specific languages it is necessary for syntax highlighting.
If you want to use TreeSitter, check out this [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][website]] or try out [[https://github.com/renzmann/treesit-auto][Treesit-auto]].
Currently it's tedious to use Treesitter, because emacs has not yet fully migrated to it.
*** Lisps
**** Lispy & Lispyville
#+begin_src emacs-lisp
            (use-package lispy 
              :hook ((lisp-mode . lispy-mode)
                 (emacs-lisp-mode . lispy-mode)
                 (ielm-mode . lispy-mode)
                 (scheme-mode . lispy-mode)
                 (racket-mode . lispy-mode)
                 (hy-mode . lispy-mode)
                 (lfe-mode . lispy-mode)
                 (dune-mode . lispy-mode)
                 (clojure-mode . lispy-mode)
                 (fennel-mode . lispy-mode)))

            (use-package lispyville
              :after lispy
              :hook
              (lispy-mode . (lambda () (lispyville-mode)))
              :config
              (lispyville-set-key-theme
               '((operators normal)
                  c-w
                  (prettify insert)
                  (atom-movement t)
                  slurp/barf-lispy
                  additional
                  additional-insert)))
#+end_src
**** Clojure
#+begin_src emacs-lisp
    (use-package clojure-mode 
      :mode (("\\.clj\\'" . clojure-mode)
             ("\\.cljs\\'" . clojure-mode) 
             ("\\.cljs\\'" . clojure-mode)
             ("\\.cljs\\'" . clojure-mode)
             ("\\.edn\\'" . clojure-mode)))

    (use-package cider
      :after clojure-mode
      :hook (clojure-mode . cider-mode)
      :config
      (setq cider-save-file-on-load t)
      (j/local-leader-keys :states 'normal :keymaps 'clojure-mode-map
        "c" '(:ignore t :wk "Connect")
        "c j" '(cider-jack-in :wk "Cider jack in")
        "c c" '(cider-connect :wk "Cider connect")
        "e" '(:ignore t :wk "Evaluate")
        "e b" '(cider-eval-buffer :wk "Evaluate Clojure in buffer")
        "e d" '(cider-eval-defun-at-point :wk "Evaluate Clojure defun")
        "e e" '(cider-eval-last-sexp :wk "Evaluate Clojure last sexp")
        "e r" '(cider-eval-region :wk "Evaluate Clojure in region")))
#+end_src
**** Common Lisp
#+begin_src emacs-lisp
    (use-package sly
       :hook (lisp-mode . sly-editing-mode)
       :config
       (setq inferior-lisp-program "sbcl")
       :general
       (j/local-leader-keys 'normal lisp-mode-map
         "e" '(:ignore t :wk "Evaluate")
         "e b" '(sly-eval-buffer :wk "Evaluate elisp in buffer")
         "e d" '(sly-eval-defun :wk "Evaluate elisp defun")
         "e e" '(sly-eval-last-expression :wk "Evaluate elisp last sexp")
          ))

#+end_src
**** Emacs Lisp
#+begin_src emacs-lisp
    (use-package emacs
      :ensure nil
      :general 
      (j/local-leader-keys :states 'normal :keymaps 'emacs-lisp-mode-map
        "e" '(:ignore t :wk "Evaluate")
        "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
        "e d" '(eval-defun :wk "Evaluate elisp defun")
        "e e" '(eval-last-sexp :wk "Evaluate elisp last sexp")
        "e r" '(eval-region :wk "Evaluate elisp in region")))

#+end_src

*** Lua
#+begin_src emacs-lisp
    (use-package lua-mode
      :mode "\\.lua\\'"
      :hook (lua-mode . eglot-ensure)) 
#+end_src

*** Markdown
#+begin_src emacs-lisp
    (use-package markdown-mode
      :mode ("README\\.md\\'" . gfm-mode))
#+end_src
*** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'"
  :hook (nix-mode . eglot-ensure))
#+end_src
*** Nushell
#+begin_src emacs-lisp
    (use-package nushell-mode
      :ensure (:host github :repo "mrkkrp/nushell-mode")
      :hook (nushell-mode . eglot-ensure)
      :mode "\\.nu\\'")
#+end_src

*** Org
Org mode is one of the things that emacs is loved for.
Once you've used it for a bit, you'll understand why people love it. Even reading about it can be inspiring!
For example, this document is effectively the source code and descriptions bound into the one document,
much like the literate programming ideas that Donald Knuth made famous.
#+begin_src emacs-lisp
    (use-package org
      :ensure nil
      :custom
      (org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.

      :hook
      (org-mode . org-indent-mode) ;; Indent text
      ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
      ;; Otherwise, org-tempo is broken when you try to <s TAB...
      (org-mode . (lambda ()
                    (setq-local electric-pair-inhibit-predicate
                                `(lambda (c)
                                   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
      :general
      (j/local-leader-keys 'normal org-mode-map
        "i" '(:ignore t :wk "Insert")
        "i b" '(org-insert-structure-template :wk "Insert block")
        "i l" '(org-insert-link :wk "Insert link"))
      )
#+end_src

**** Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :hook (org-mode . toc-org-mode))
#+end_src

**** Org Superstar
Prettify headings and plain lists in Org mode. Modern version of org-bullets.
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode))
#+end_src

**** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (use-package org-tempo
      :ensure nil
      :after org)
#+end_src

*** Rust
#+begin_src emacs-lisp
    (use-package rust-mode
      :mode "\\.rs\\'"
      :hook (typescript-mode . eglot-ensure)
      :config
      (setq rust-format-on-save t))
    (use-package flycheck-rust
      :after rust-mode
      :hook (flycheck-mode . #'flycheck-rust-setup))
#+end_src
*** Typescript
#+begin_src emacs-lisp
    (use-package typescript-mode
      :mode "\\.ts\\'" ;; Automatically activate for .ts files
      :hook ((typescript-mode . eglot-ensure)
             (typescript-mode . flycheck-mode)) ;; Just in case I disable global-flycheck-mode
      :config
      (setq typescript-indent-level 2)) ;; Set indentation level (adjust as needed)
#+end_src
*** Web
#+begin_src emacs-lisp
    (use-package web-mode
      :ensure t
      :mode "\\.tsx\\'" 
      :hook ((web-mode . eglot-ensure)
             (web-mode . flycheck-mode))
      :config
      (setq web-mode-content-types-alist '(("jsx" . "\\.tsx\\'"))
            web-mode-markup-indent-offset 2
            web-mode-code-indent-offset 2))
#+end_src
** Terminal
*** Eat
Eat(Emulate A Terminal) is a terminal emulator within Emacs.
It's more portable and less overhead for users over like vterm or eshell.
We setup eat with eshell, if you want to use bash, zsh etc., check out their git [[https://codeberg.org/akib/emacs-eat][repository]] how to do it.
#+begin_src emacs-lisp
    (use-package eat
      :hook ('eshell-load-hook #'eat-eshell-mode))
#+end_src

** Tree sitter
#+begin_src emacs-lisp
    (use-package treesit
      :ensure nil)
    (use-package treesit-auto
      :after treesit
      :config
      (global-treesit-auto-mode))
#+end_src
* Multi File Example
** Adding the lisp directory to load-path
Adds the lisp directory to emacs's load path to search for elisp files.
This is necessary, because emacs does not search the entire user-emacs-directory.
The directory name can be anything, just add it to the load-path.
#+begin_src emacs-lisp
    ;; (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Sourcing the files
To use the elisp files we need to load it.
Notes:
- Don't forget the file and the provide name needs to be the same.
- When naming elisp files, functions, it is recommended to use a group name (e.g init-, start- or any custom name), so it does not get mixed up with other names, functions.
#+begin_src emacs-lisp
    ;; (require 'start-multiFileExample)
#+end_src

** Using the file
And now we can use everything from that file.
#+begin_src emacs-lisp
    ;; (start/hello)
#+end_src

* Other Packages
All the package setups that don't need much tweaking.
** Nerd Icons
For icons and more helpful UI.
This is an icon set that can be used with dired, ibuffer and other Emacs programs.

Don't forget to use nerd-icons-install-fonts.

We use Nerd icons because it has more, better icons and all-the-icons only supports GUI.
While nerd-icons supports both GUI and TUI.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Git
*** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      :commands magit-status)
#+end_src

*** Diff-hl
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src emacs-lisp
    (use-package diff-hl
      :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
             (magit-pre-refresh  . diff-hl-magit-pre-refresh)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :init (global-diff-hl-mode))
#+end_src

** Completion popup - Corfu
Enhances in-buffer completion with a small completion popup.
Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion.
For more configuration options check out their [[https://github.com/minad/corfu][git repository]].
Notes:
- To enter Orderless field separator, use M-SPC.
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      (corfu-auto-prefix 2)          ;; Minimum length of prefix for auto completion.
      (corfu-popupinfo-mode t)       ;; Enable popup information
      (corfu-popupinfo-delay 0.5)    ;; Lower popupinfo delay to 0.5 seconds from 2 seconds
      (corfu-separator ?\s)          ;; Orderless field separator, Use M-SPC to enter separator
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
      ;; (corfu-scroll-margin 5)        ;; Use scroll margin
      (completion-ignore-case t)
      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)
      (corfu-preview-current nil) ;; Don't insert completion without confirmation
      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

    (use-package nerd-icons-corfu
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape
Provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI.
Notes:
- The functions that are added later will be the first in the completion list.
- Take care when adding Capfs (Completion-at-point-functions) to the list since each of the Capfs adds a small runtime cost.
Read the [[https://github.com/minad/cape#configuration][configuration section]] in Cape's readme for more information.
#+begin_src emacs-lisp
    (use-package cape
      :after corfu
      :init
      ;; Add to the global default value of `completion-at-point-functions' which is
      ;; used by `completion-at-point'.  The order of the functions matters, the
      ;; first function returning a result wins.  Note that the list of buffer-local
      ;; completion functions takes precedence over the global list.
      ;; The functions that are added later will be the first in the list

      (add-to-list 'completion-at-point-functions #'cape-dabbrev) ;; Complete word from current buffers
      (add-to-list 'completion-at-point-functions #'cape-dict) ;; Dictionary completion
      (add-to-list 'completion-at-point-functions #'cape-file) ;; Path completion
      (add-to-list 'completion-at-point-functions #'cape-elisp-block) ;; Complete elisp in Org or Markdown mode
      (add-to-list 'completion-at-point-functions #'cape-keyword) ;; Keyword/Snipet completion

      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev) ;; Complete abbreviation
      ;;(add-to-list 'completion-at-point-functions #'cape-history) ;; Complete from Eshell, Comint or minibuffer history
      ;;(add-to-list 'completion-at-point-functions #'cape-line) ;; Complete entire line from current buffer
      ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol) ;; Complete Elisp symbol
      ;;(add-to-list 'completion-at-point-functions #'cape-tex) ;; Complete Unicode char from TeX command, e.g. \hbar
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml) ;; Complete Unicode char from SGML entity, e.g., &alpha
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345) ;; Complete Unicode char using RFC 1345 mnemonics
      )
#+end_src

** Evil extensions
*** Commenting
Use Nerd Commenter to efficiently comment/uncomment lines of code.

#+begin_src emacs-lisp
    (use-package evil-nerd-commenter
      :after evil
      :general (:states 'normal :keymaps 'override "g c" #'evilnc-comment-operator))
#+end_src
*** Snipe
#+begin_src emacs-lisp
    (use-package evil-snipe
      :defer t
      :after evil
      ;; :commands evil-snipe-local-mode evil-snipe-override-local-mode
      ;; :hook (doom-first-input . evil-snipe-override-mode)
      ;; :hook (doom-first-input . evil-snipe-mode)
      :init
      (setq evil-snipe-smart-case t
            evil-snipe-scope 'line
            evil-snipe-repeat-scope 'visible
            evil-snipe-char-fold t)
      :config
      (evil-snipe-mode +1)
      (evil-snipe-override-mode +1))
#+end_src
*** Surround
#+begin_src emacs-lisp
    (use-package evil-surround
      :after evil
      :defer t
      ;; :commands (global-evil-surround-mode
      ;;            evil-surround-edit
      ;;            evil-Surround-edit
      ;;            evil-surround-region)
      :config (global-evil-surround-mode 1))
#+end_src
*** Colemak adjustments

#+begin_src emacs-lisp
    (use-package evil-colemak-basics
      :after evil
      :init
      (setq evil-colemak-basics-rotate-t-f-j t
            evil-escape-key-sequence "vk")
      :config
      (global-evil-colemak-basics-mode))
#+end_src

** Orderless
Completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
Recomended for packages like vertico, corfu.
#+begin_src emacs-lisp
    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico and Marginalia
- Vertico: Provides a performant and minimalistic vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).
- Nerd-icons-completion: Adds icons to completion candidates using the built in completion metadata functions.

We use this packages, because they use emacs native functions. Unlike Ivy or Helm.
One alternative is ivy and counsel, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] for more inforomation.
#+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (savehist-mode) ;; Enables save history mode

    (use-package marginalia
      :after vertico
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

** Consult
Provides search and navigation commands based on the Emacs completion function.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.
#+begin_src emacs-lisp
    (use-package consult
      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI.
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      :config
      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key "M-.")
      ;; (setq consult-preview-key '("S-<down>" "S-<up>"))

      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      ;; (consult-customize
      ;; consult-theme :preview-key '(:debounce 0.2 any)
      ;; consult-ripgrep consult-git-grep consult-grep
      ;; consult-bookmark consult-recent-file consult-xref
      ;; consult--source-bookmark consult--source-file-register
      ;; consult--source-recent-file consult--source-project-recent-file
      ;; :preview-key "M-."
      ;; :preview-key '(:debounce 0.4 any))

      ;; By default `consult-project-function' uses `project-root' from project.el.
      ;; Optionally configure a different project root function.
       ;;;; 1. project.el (the default)
      ;; (setq consult-project-function #'consult--default-project--function)
       ;;;; 2. vc.el (vc-root-dir)
      ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
       ;;;; 3. locate-dominating-file
      ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
       ;;;; 4. projectile.el (projectile-project-root)
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-function (lambda (_) (projectile-project-root)))
       ;;;; 5. No project support
      ;; (setq consult-project-function nil)
      )
#+end_src

** Rainbow Delimiters
Adds colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Which-Key
Which-key is a helper utility for keychords (which key to press).
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
      :diminish
      :custom
      (which-key-side-window-location 'bottom)
      (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
      (which-key-sort-uppercase-first nil)
      (which-key-add-column-padding 1) ;; Number of spaces to add to the left of each column
      (which-key-min-display-lines 6)  ;; Increase the minimum lines to display, because the default is only 1
      (which-key-idle-delay 0.8)       ;; Set the time delay (in seconds) for the which-key popup to appear
      (which-key-max-description-length 25)
      (which-key-allow-imprecise-window-fit nil)) ;; Fixes which-key window slipping out in Emacs Daemon
#+end_src
** Disable line numbers in some modes

#+begin_src emacs-lisp
    ;; Define a list of modes where line numbers should be disabled
    (setq display-line-numbers-exempt-modes
          '(minibuffer-mode
            eat-mode
            eshell-mode
            shell-mode
            term-mode
            vterm-mode))

    ;; Disable line numbers in the exempt modes
    (defun display-line-numbers--disable-for-exempt-modes ()
      "Disable line numbers for modes listed in `display-line-numbers-exempt-modes`."
      (when (apply 'derived-mode-p display-line-numbers-exempt-modes)
        (display-line-numbers-mode 0)))

    (add-hook 'after-change-major-mode-hook #'display-line-numbers--disable-for-exempt-modes)
#+end_src

** Calendar
#+begin_src emacs-lisp
(setq calendar-latitude 51.11)
(setq calendar-longitude 17.0325)
(setq calendar-location-name "Wroclaw, Poland")
#+end_src
** Obsidian
#+begin_src emacs-lisp
    (use-package obsidian
      :hook
      (markdown-mode . obsidian-mode)
      :general
      (j/leader-keys
        "n" '(:ignore t :wk "Notes")
        "n c" '(obsidian-capture :wk "Capture note")
        "n d" '(obsidian-daily-note :wk "Capture daily note")
        "n n" '(obsidian-jump :wk "Go to note")
        "n s" '(obsidian-search :wk "Search")
        "n u" '(obsidian-update :wk "Update"))
      (j/local-leader-keys :keymaps 'obsidian-mode-map
        "l" '(:ignore t :wk "Link")
        "l l" '(obsidian-insert-link :wk "Insert")
        "l f" '(obsidian-follow-link-at-point :wk "Follow")
        "l b" '(obsidian-backlink-jump :wk "Backlinks"))
      :config
      (obsidian-specify-path "~/Sync/obsidian")
      ;; (global-obsidian-mode t)
      :custom
      ;; This directory will be used for `obsidian-capture' if set.
      (obsidian-inbox-directory "inbox")
      (obsidian-daily-notes-directory "journal")
      (obsidian-templates-directory "templates")
      (obsidian-daily-note-template "daily.md"))
#+end_src
* AI assistance
** Copilot
#+begin_src emacs-lisp
    (use-package copilot
      :ensure (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
      :hook '(prog-mode . copilot-mode)
      :bind (:map copilot-completion-map
                  ("<tab>" . 'copilot-accept-completion)
                  ("TAB" . 'copilot-accept-completion)
                  ("C-<tab>" . 'copilot-accept-completion-by-word)
                  ("C-TAB" . 'copilot-accept-completion-by-word))
      :config
      (add-to-list 'copilot-indentation-alist '(emacs-lisp-mode 2)))
#+end_src
** GPtel
#+begin_src emacs-lisp
    (use-package gptel
      :defer t
      :general
      (j/leader-keys
        "o g" '(gptel :wk "GPTel (LLM)"))
      (j/leader-keys :states '(visual)
        "o g" '(gptel-send :wk "Send to GPTel (LLM)")))
#+end_src
* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase Read Process Output Max so emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
